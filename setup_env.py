#!/usr/bin/env python3
"""
Environment Setup Script

This script helps you configure your .env file with the correct values.
"""

import os
import secrets
import string
from pathlib import Path

def generate_secret_key():
    """Generate a secure random secret key."""
    alphabet = string.ascii_letters + string.digits + string.punctuation
    return ''.join(secrets.choice(alphabet) for _ in range(32))

def get_user_input(prompt, default=""):
    """Get user input with a default value."""
    if default:
        user_input = input(f"{prompt} [{default}]: ").strip()
        return user_input if user_input else default
    else:
        return input(f"{prompt}: ").strip()

def setup_env_file():
    """Set up the .env file with user input."""
    print("üîß Google Calendar Sync Environment Setup")
    print("=" * 50)
    print()
    
    # Check if .env.example exists
    if not os.path.exists('.env.example'):
        print("‚ùå .env.example file not found!")
        print("Please make sure you're in the correct directory.")
        return False
    
    # Check if .env already exists
    if os.path.exists('.env'):
        print("‚ö†Ô∏è  .env file already exists!")
        print("This will update your existing .env file with new values.")
        print("Your current settings will be replaced.")
        print()
        overwrite = input("Do you want to continue? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("Setup cancelled. Your .env file remains unchanged.")
            return False
    
    print("Please provide the following information:")
    print()
    
    # Required settings
    print("üìã REQUIRED SETTINGS")
    print("-" * 30)
    
    spreadsheet_id = get_user_input(
        "Enter your Google Spreadsheet ID",
        "your-spreadsheet-id-here"
    )
    
    flask_secret_key = generate_secret_key()
    print(f"Generated Flask secret key: {flask_secret_key}")
    
    print()
    print("üìß EMAIL NOTIFICATION SETTINGS (Optional)")
    print("-" * 45)
    
    send_email = get_user_input(
        "Enable email notifications? (true/false)",
        "true"
    )
    
    smtp_server = get_user_input(
        "SMTP server (e.g., smtp.gmail.com)",
        "smtp.gmail.com"
    )
    
    smtp_port = get_user_input(
        "SMTP port",
        "587"
    )
    
    smtp_username = get_user_input(
        "Email username",
        "your-email@gmail.com"
    )
    
    smtp_password = get_user_input(
        "Email app password",
        "your-app-password"
    )
    
    from_email = get_user_input(
        "From email address",
        smtp_username
    )
    
    to_email = get_user_input(
        "To email address",
        "recipient@example.com"
    )
    
    print()
    print("‚öôÔ∏è  SYNC CONFIGURATION")
    print("-" * 30)
    
    use_gemini = get_user_input(
        "Use Gemini AI parser? (true/false)",
        "true"
    )
    
    print()
    print("‚òÅÔ∏è  GOOGLE CLOUD DEPLOYMENT (Optional)")
    print("-" * 40)
    
    project_id = get_user_input(
        "Google Cloud Project ID",
        "your-project-id"
    )
    
    client_id = get_user_input(
        "Google OAuth Client ID",
        "your-google-oauth-client-id"
    )
    
    client_secret = get_user_input(
        "Google OAuth Client Secret",
        "your-google-oauth-client-secret"
    )
    
    print()
    print("üîß ADVANCED SETTINGS")
    print("-" * 25)
    
    calendar_name = get_user_input(
        "Default calendar name",
        "SLOHS Sports"
    )
    
    log_level = get_user_input(
        "Logging level (DEBUG/INFO/WARNING/ERROR)",
        "INFO"
    )
    
    timezone = get_user_input(
        "Timezone",
        "America/Los_Angeles"
    )
    
    # Create .env content
    env_content = f"""# Google Calendar Sync Configuration
# Generated by setup_env.py

# =============================================================================
# REQUIRED SETTINGS
# =============================================================================

# Your Google Spreadsheet ID (required)
SPREADSHEET_ID={spreadsheet_id}

# Flask secret key for web sessions (required for web app)
FLASK_SECRET_KEY={flask_secret_key}

# =============================================================================
# EMAIL NOTIFICATION SETTINGS (Optional)
# =============================================================================

# Enable/disable email notifications
SEND_EMAIL={send_email}

# Email server configuration
SMTP_SERVER={smtp_server}
SMTP_PORT={smtp_port}
SMTP_USERNAME={smtp_username}
SMTP_PASSWORD={smtp_password}
FROM_EMAIL={from_email}
TO_EMAIL={to_email}

# =============================================================================
# GOOGLE CLOUD DEPLOYMENT SETTINGS (Optional)
# =============================================================================

# Google Cloud Project ID (for deployment)
GOOGLE_PROJECT_ID={project_id}

# Google OAuth credentials (for production deployment)
GOOGLE_CLIENT_ID={client_id}
GOOGLE_CLIENT_SECRET={client_secret}

# =============================================================================
# ADVANCED SETTINGS (Optional)
# =============================================================================

# Default calendar name (if not specified, uses sheet names)
CALENDAR_NAME={calendar_name}

# Logging level (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL={log_level}

# Timezone for date parsing (default: America/Los_Angeles)
TIMEZONE={timezone}
"""
    
    # Write .env file
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print()
    print("‚úÖ .env file created successfully!")
    print()
    print("üìã Next steps:")
    print("1. Review the .env file and update any values if needed")
    print("2. Run: python setup_automation.py")
    print("3. Test with: python automated_sync.py")
    print()
    print("üîê Security note: Keep your .env file secure and never commit it to version control!")
    
    return True

def main():
    """Main function."""
    try:
        setup_env_file()
    except KeyboardInterrupt:
        print("\n\n‚ùå Setup cancelled by user.")
    except Exception as e:
        print(f"\n‚ùå Error during setup: {e}")

if __name__ == '__main__':
    main() 